#pragma checksum "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "99b610839980102866abc35f0ab86ea1682a7153"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Disciplines_Index), @"mvc.1.0.view", @"/Views/Disciplines/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Disciplines/Index.cshtml", typeof(AspNetCore.Views_Disciplines_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\_ViewImports.cshtml"
using WebApp;

#line default
#line hidden
#line 2 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\_ViewImports.cshtml"
using WebApp.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"99b610839980102866abc35f0ab86ea1682a7153", @"/Views/Disciplines/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fc48f17eb9bac3476d8060730298bf398eb2fa5e", @"/Views/_ViewImports.cshtml")]
    public class Views_Disciplines_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<WebApp.Models.ViewModels.Discipline>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("disForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(57, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
            BeginContext(100, 57, true);
            WriteLiteral("\r\n<h2>Disciplines</h2>\r\n<br />\r\n\r\n<div class=\"row\">\r\n    ");
            EndContext();
            BeginContext(158, 18, false);
#line 11 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
Write(ViewBag.Validation);

#line default
#line hidden
            EndContext();
            BeginContext(176, 10, true);
            WriteLiteral("\r\n</div>\r\n");
            EndContext();
            BeginContext(186, 1196, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "19603d85105e4c1e9f13b4235316fe2f", async() => {
                BeginContext(205, 1170, true);
                WriteLiteral(@"
    <div class=""form-row"">
        <div class=""form-group col-md-3"">
            <label for=""Name"">Name</label>
            <input type=""text"" class=""form-control is-valid"" id=""disciplineName"" placeholder=""Name"">
            <div class=""hidden"" id=""nameVMessage"">
            </div>
        </div>
        <div class=""form-group col-md-3"">
            <label for=""ProffesorName"">Proffesor Name</label>
            <input type=""text"" class=""form-control is-valid"" id=""disciplineProfessorName"" placeholder=""Proffesor Name"">
            <div class=""hidden"" id=""prNameVMessage"">
            </div>
        </div>
        <div class=""form-group col-md-3"">
            <label for=""Score"">Score</label>
            <input type=""number"" class=""form-control"" min=""0"" value=""0"" step="".5"" id=""disciplineScore"">
            <div class=""hidden"" id=""scoreVMessage"">
            </div>
        </div>
        <div class=""form-group col-md-3"">
            <label for=""button""></label>
            <div>
             ");
                WriteLiteral("   <button type=\"button\" id=\"create\" class=\"btn btn-primary mb-2\">Create new descipline</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1382, 12, true);
            WriteLiteral("\r\n<br />\r\n\r\n");
            EndContext();
            BeginContext(2266, 113, true);
            WriteLiteral("<br />\r\n<table class=\"table\" id=\"disciplinesGrid\">\r\n    <thead>\r\n        <tr>\r\n            <th>\r\n                ");
            EndContext();
            BeginContext(2380, 38, false);
#line 65 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
           Write(Html.DisplayNameFor(model => model.Id));

#line default
#line hidden
            EndContext();
            BeginContext(2418, 55, true);
            WriteLiteral("\r\n            </th>\r\n            <th>\r\n                ");
            EndContext();
            BeginContext(2474, 40, false);
#line 68 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
           Write(Html.DisplayNameFor(model => model.Name));

#line default
#line hidden
            EndContext();
            BeginContext(2514, 55, true);
            WriteLiteral("\r\n            </th>\r\n            <th>\r\n                ");
            EndContext();
            BeginContext(2570, 49, false);
#line 71 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
           Write(Html.DisplayNameFor(model => model.ProfessorName));

#line default
#line hidden
            EndContext();
            BeginContext(2619, 55, true);
            WriteLiteral("\r\n            </th>\r\n            <th>\r\n                ");
            EndContext();
            BeginContext(2675, 41, false);
#line 74 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
           Write(Html.DisplayNameFor(model => model.Score));

#line default
#line hidden
            EndContext();
            BeginContext(2716, 124, true);
            WriteLiteral("\r\n            </th>\r\n            <th>\r\n                Action\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n");
            EndContext();
#line 82 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
         foreach (var item in Model)
        {

#line default
#line hidden
            BeginContext(2889, 60, true);
            WriteLiteral("            <tr>\r\n                <td>\r\n                    ");
            EndContext();
            BeginContext(2950, 37, false);
#line 86 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Id));

#line default
#line hidden
            EndContext();
            BeginContext(2987, 67, true);
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
            EndContext();
            BeginContext(3055, 39, false);
#line 89 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Name));

#line default
#line hidden
            EndContext();
            BeginContext(3094, 67, true);
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
            EndContext();
            BeginContext(3162, 48, false);
#line 92 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.ProfessorName));

#line default
#line hidden
            EndContext();
            BeginContext(3210, 67, true);
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
            EndContext();
            BeginContext(3278, 40, false);
#line 95 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Score));

#line default
#line hidden
            EndContext();
            BeginContext(3318, 214, true);
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    <button type=\"button\" name=\"editBtn\" onclick=\"editBtn(this)\" class=\"btn btn-warning mb-2\">Edit</button>\r\n                </td>\r\n            </tr>\r\n");
            EndContext();
#line 101 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Disciplines\Index.cshtml"
        }

#line default
#line hidden
            BeginContext(3543, 28, true);
            WriteLiteral("    </tbody>\r\n</table>\r\n\r\n\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(3588, 12485, true);
                WriteLiteral(@"
    <script type=""text/javascript"">

        var nameregex = /^[A-Z].+$/;
        var prnameregex = /^[A-Z]+[a-z]+([\s.]*[A-Z]+[a-z]+)*$/;

        function nameValidation(nameVal, idMessSelector, inputIdSellector) {
            var nameMessage = """";
            $(inputIdSellector).css('border', '');
            $(idMessSelector).css('color', '');

            if (nameVal.length === 0) {
                nameMessage = ""Name is required"";
                $(idMessSelector).text(nameMessage);
                $(idMessSelector).attr('class', 'visible-lg');
                $(inputIdSellector).css('border', '2px solid #FF0000');
                $(idMessSelector).css('color', 'red');
                return false;
            }
            else {
                if (nameVal.match(nameregex)) {
                    $(idMessSelector).attr('class', 'hidden');
                    $(idMessSelector).text();
                    return true;
                }
                else {
                   ");
                WriteLiteral(@" nameMessage = ""Name must starts with uppercase and contains at least 2 letters"";
                    $(idMessSelector).text(nameMessage);
                    $(idMessSelector).attr('class', 'visible-lg');
                    $(inputIdSellector).css('border', '2px solid #FF0000');
                    $(idMessSelector).css('color', 'red');
                    return false;
                }
            }
        }

        function prNameValidation(prnameVal, idMessSelector, inputIdSellector) {
            var prnameMessage = """";
            $(inputIdSellector).css('border', '');
            $(idMessSelector).css('color', '');

            if (prnameVal.length === 0) {
                prnameMessage = ""Proffesor Name is required"";
                $(idMessSelector).text(prnameMessage);
                $(idMessSelector).attr('class', 'visible-lg');
                $(inputIdSellector).css('border', '2px solid #FF0000');
                $(idMessSelector).css('color', 'red');
                ret");
                WriteLiteral(@"urn false;
            }
            else {
                if (prnameVal.match(prnameregex)) {
                    $(idMessSelector).attr('class', 'hidden');
                    $(idMessSelector).text();

                    return true;
                }
                else {
                    prnameMessage = ""Proffesor Name must starts with uppercase follow with lowercase letter and contains at least 2 letters"";
                    $(idMessSelector).text(prnameMessage);
                    $(idMessSelector).attr('class', 'visible-lg');
                    $(inputIdSellector).css('border', '2px solid #FF0000');
                    $(idMessSelector).css('color', 'red');
                    return false;
                }
            }
        }

        function scoreValidation(scoreVal, idMessSelector, inputIdSellector) {
            var scoreMessage = """";
            $(inputIdSellector).css('border', '');
            $(idMessSelector).css('color', '');
            if (scoreVal) {");
                WriteLiteral(@"
                if (scoreVal >= 0) {
                    $(idMessSelector).attr('class', 'hidden');
                    $(idMessSelector).text();
                    return true;
                }
                else {
                    scoreMessage = ""Score must be a positive number"";
                    $(idMessSelector).text(scoreMessage);
                    $(idMessSelector).attr('class', 'visible-lg');
                    $(inputIdSellector).css('border', '2px solid #FF0000');
                    $(idMessSelector).css('color', 'red');
                    return false;
                }
            }
            else {
                scoreMessage = ""Score must be a number"";
                $(idMessSelector).text(scoreMessage);
                $(idMessSelector).attr('class', 'visible-lg');
                $(inputIdSellector).css('border', '2px solid #FF0000');
                $(idMessSelector).css('color', 'red');
                return false;
            }
        }

       ");
                WriteLiteral(@" $('#disciplineName').on('change', function () {
            var nameVal = $(this).val();
            nameValidation(nameVal, '#nameVMessage', '#disciplineName');
        })
        $('#disciplineProfessorName').on('change', function () {
            var prnameVal = $(this).val();
            prNameValidation(prnameVal, '#prNameVMessage', '#disciplineProfessorName');
        })
        $('#disciplineScore').on('change', function () {
            var scoreVal = Number($(this).val());
            scoreValidation(scoreVal, '#scoreVMessage', '#disciplineScore');
        })

        function showErrorMessages(message, messSelector, inputSellector) {
            $(inputSellector).css('border', '2px solid #FF0000');
            $(messSelector).text(message);
            $(messSelector).attr('class', 'visible-lg');
            $(messSelector).css('color', 'red');
        }


        function saveBtn(result) {
            var childrens = $(result).parent().parent().children();
            var na");
                WriteLiteral(@"meinput = $(childrens[1]).children();
            var prinput = $(childrens[2]).children();
            var scoreinput = $(childrens[3]).children();
            var disEditName = $(nameinput[0]).val();
            var disEditPrName = $(prinput[0]).val();
            var disEditPrScore = $(scoreinput[0]).val();


            $(nameinput[0]).on('change', function () {
                var nameVal = $(this).val();
                nameValidation(nameVal, nameinput[1], nameinput[0]);
            })
            $(prinput[0]).on('change', function () {
                var prnameVal = $(this).val();
                prNameValidation(prnameVal, prinput[1], prinput[0]);
            })
            $(scoreinput[0]).on('change', function () {
                var scoreVal = Number($(this).val());
                scoreValidation(scoreVal, scoreinput[1], scoreinput[0]);
            })

            var editnameValSuc = nameValidation(disEditName, nameinput[1], nameinput[0]);
            var editproNameValS");
                WriteLiteral(@"uc = prNameValidation(disEditPrName, prinput[1], prinput[0]);
            var editscoreValSuc = scoreValidation(disEditPrScore, scoreinput[1], scoreinput[0]);

            if (editnameValSuc && editproNameValSuc && editscoreValSuc) {
                var id = $(childrens[0]).text();
                $.ajax(
                    {
                        type: ""PUT"", //HTTP PUT Method
                        url: ""Disciplines/Edit"", // Controller/View
                        data: { //Passing data
                            Id: id,
                            Name: disEditName, //Reading text box values using Jquery
                            ProfessorName: disEditPrName,
                            Score: disEditPrScore
                        },
                        success: function (response) {
                            if (response.success) {
                                $(childrens[1]).empty()
                                    .append(`${response.result.name}`);
              ");
                WriteLiteral(@"                  $(childrens[2]).empty()
                                    .append(`${response.result.professorName}`);
                                $(childrens[3]).empty()
                                    .append(`${response.result.score.toFixed(2)}`);
                                $(childrens[4]).empty()
                                    .append(`<button type=""button"" onclick=""editBtn($(this))"" class=""btn btn-warning mb-2"">Edit</button>`);
                            } else {
                                if (response.result.nameMessage) {
                                    showErrorMessages(response.result.nameMessage, nameinput[1], nameinput[0]);
                                }
                                if (response.result.prNameMessage) {
                                    showErrorMessages(response.result.prNameMessage, prinput[1], prinput[0]);
                                }
                                if (response.result.scoreMessage) {
                    ");
                WriteLiteral(@"                showErrorMessages(response.result.scoreMessage, scoreinput[1], scoreinput[0]);
                                }
                            }
                        }
                    });
            } 
        };

        function editBtn(result) {
            var childrens = $(result).parent().parent().children();
            var disName = $(childrens[1]).text().trim();
            var disPrName = $(childrens[2]).text().trim();
            var disScore = $(childrens[3]).text().trim();

            $(childrens[1]).empty()
                .append(`<input type=""text"" class=""form-control"" value=""${disName}"" id=""disNameEdit"" placeholder=""Name"">
                              <div class=""hidden"" id=""editNameVMessage""></div>`)
            $(childrens[2]).empty()
                .append(`<input type=""text"" class=""form-control"" value=""${disPrName}"" id=""disPrNameEdit"" placeholder=""ProfessorName"">
                           <div class=""hidden"" id=""editPrVMessage""></div>`)
      ");
                WriteLiteral(@"      $(childrens[3]).empty()
                .append(`<input type=""number""  min=""0""  step="".5"" class=""form-control"" value=""${disScore}"" id=""disScoreEdit"">
                   <div class=""hidden"" id=""editScoreVMessage""></div>`)
            $(childrens[4]).empty()
                .append(`<button  onclick=""saveBtn($(this))"" type=""button"" name=""saveBtn"" class=""btn btn-success mb-2"">Save</button>`)

            var nameinput = $(childrens[1]).children();
            var prinput = $(childrens[2]).children();
            var scoreinput = $(childrens[3]).children();

            $(nameinput[0]).on('change', function () {
                var nameVal = $(this).val();
                nameValidation(nameVal, nameinput[1], nameinput[0]);
            })
            $(prinput[0]).on('change', function () {
                var prnameVal = $(this).val();
                prNameValidation(prnameVal, prinput[1], prinput[0]);
            })
            $(scoreinput[0]).on('change', function () {
              ");
                WriteLiteral(@"  var scoreVal = Number($(this).val());
                scoreValidation(scoreVal, scoreinput[1], scoreinput[0]);
            })
        };

        //$(document).ready(function () {

        $('#create').click(function (e) {

            let disciplineName = $('#disciplineName').val();
            let disciplineProfessorName = $('#disciplineProfessorName').val();
            let disciplineScore = $('#disciplineScore').val();

            var nameValSuc = nameValidation(disciplineName, '#nameVMessage', '#disciplineName');
            var proNameValSuc = prNameValidation(disciplineProfessorName, '#prNameVMessage', '#disciplineProfessorName');
            var scoreValSuc = scoreValidation(disciplineScore, '#scoreVMessage', '#disciplineScore');

            if (nameValSuc && proNameValSuc && scoreValSuc) {
                //e.stopPropagation();
                $.ajax(
                    {
                        type: ""POST"", //HTTP POST Method
                        url: ""/Disciplines/Cre");
                WriteLiteral(@"ate"", // Controller/View
                        data: { //Passing data
                            Name: disciplineName, //Reading text box values using Jquery
                            ProfessorName: disciplineProfessorName,
                            Score: disciplineScore
                        },
                        success: function (result) {
                            $('#disciplinesGrid > tbody:last')
                                .append(`<tr><td>${result.id}</td>
                                         <td>${result.name}</td><td>${result.professorName}</td>
                                         <td>${result.score.toFixed(2)}</td><td>
                                    <button type=""button"" onclick=""editBtn(this)""  name=""editBtn"" class=""btn btn-warning mb-2"">Edit</button></td></tr>`);

                            return true;
                        }
                    });

                $('#disciplineName').val('');
                $('#disciplineProfessorName')");
                WriteLiteral(".val(\'\');\r\n                $(\'#disciplineScore\').val(\'\');\r\n            }\r\n            else {\r\n                e.preventDefault();\r\n            }\r\n        })\r\n                //})\r\n    </script>\r\n\r\n");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<WebApp.Models.ViewModels.Discipline>> Html { get; private set; }
    }
}
#pragma warning restore 1591
