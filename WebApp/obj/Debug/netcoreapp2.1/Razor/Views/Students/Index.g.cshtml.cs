#pragma checksum "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4fc618afb0a154d12154400622d77e446e984777"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Students_Index), @"mvc.1.0.view", @"/Views/Students/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Students/Index.cshtml", typeof(AspNetCore.Views_Students_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\_ViewImports.cshtml"
using WebApp;

#line default
#line hidden
#line 2 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\_ViewImports.cshtml"
using WebApp.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4fc618afb0a154d12154400622d77e446e984777", @"/Views/Students/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fc48f17eb9bac3476d8060730298bf398eb2fa5e", @"/Views/_ViewImports.cshtml")]
    public class Views_Students_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<WebApp.Models.ViewModels.Student>>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(54, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
            BeginContext(97, 54, true);
            WriteLiteral("\r\n<h2>Students</h2>\r\n<br />\r\n\r\n<div class=\"row\">\r\n    ");
            EndContext();
            BeginContext(152, 18, false);
#line 11 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
Write(ViewBag.Validation);

#line default
#line hidden
            EndContext();
            BeginContext(170, 10, true);
            WriteLiteral("\r\n</div>\r\n");
            EndContext();
            BeginContext(180, 1105, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3137d683c52a4f998d3b5ab9a84c0aee", async() => {
                BeginContext(186, 1092, true);
                WriteLiteral(@"
    <div class=""form-row"">
        <div class=""form-group col-md-3"">
            <label for=""Name"">Name</label>
            <input type=""text"" class=""form-control is-valid"" id=""studentName"" placeholder=""Name"">
            <div class=""hidden"" id=""nameVMessage"">
            </div>
        </div>
        <div class=""form-group col-md-3"">
            <label for=""Surname"">Surname</label>
            <input type=""text"" class=""form-control is-valid"" id=""studentSurname"" placeholder=""Surname"">
            <div class=""hidden"" id=""surVMessage"">
            </div>
        </div>
        <div class=""form-group col-md-3"">
            <label for=""Dob"">DOB</label>
            <input type=""date"" class=""form-control"" id=""studentDob"">
            <div class=""hidden"" id=""dobDVMessage"">
            </div>
        </div>
        <div class=""form-group col-md-3"">
            <label for=""button""></label>
            <div>
                <button type=""button"" id=""create"" class=""btn btn-primary mb-2"">Create ne");
                WriteLiteral("w student</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1285, 114, true);
            WriteLiteral("\r\n\r\n<br />\r\n<table class=\"table\" id=\"studentsGrid\">\r\n    <thead>\r\n        <tr>\r\n            <th>\r\n                ");
            EndContext();
            BeginContext(1400, 38, false);
#line 47 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
           Write(Html.DisplayNameFor(model => model.Id));

#line default
#line hidden
            EndContext();
            BeginContext(1438, 55, true);
            WriteLiteral("\r\n            </th>\r\n            <th>\r\n                ");
            EndContext();
            BeginContext(1494, 40, false);
#line 50 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
           Write(Html.DisplayNameFor(model => model.Name));

#line default
#line hidden
            EndContext();
            BeginContext(1534, 55, true);
            WriteLiteral("\r\n            </th>\r\n            <th>\r\n                ");
            EndContext();
            BeginContext(1590, 43, false);
#line 53 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
           Write(Html.DisplayNameFor(model => model.Surname));

#line default
#line hidden
            EndContext();
            BeginContext(1633, 55, true);
            WriteLiteral("\r\n            </th>\r\n            <th>\r\n                ");
            EndContext();
            BeginContext(1689, 39, false);
#line 56 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
           Write(Html.DisplayNameFor(model => model.Dob));

#line default
#line hidden
            EndContext();
            BeginContext(1728, 124, true);
            WriteLiteral("\r\n            </th>\r\n            <th>\r\n                Action\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n");
            EndContext();
#line 64 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
         foreach (var item in Model)
        {

#line default
#line hidden
            BeginContext(1901, 60, true);
            WriteLiteral("            <tr>\r\n                <td>\r\n                    ");
            EndContext();
            BeginContext(1962, 37, false);
#line 68 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Id));

#line default
#line hidden
            EndContext();
            BeginContext(1999, 67, true);
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
            EndContext();
            BeginContext(2067, 39, false);
#line 71 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Name));

#line default
#line hidden
            EndContext();
            BeginContext(2106, 67, true);
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
            EndContext();
            BeginContext(2174, 42, false);
#line 74 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Surname));

#line default
#line hidden
            EndContext();
            BeginContext(2216, 67, true);
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
            EndContext();
            BeginContext(2284, 38, false);
#line 77 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Dob));

#line default
#line hidden
            EndContext();
            BeginContext(2322, 194, true);
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    <button type=\"button\" name=\"editBtn\" onclick=\"editBtn(this)\" class=\"btn btn-warning mb-2\">Edit</button>\r\n                    <a");
            EndContext();
            BeginWriteAttribute("href", " href=\"", 2516, "\"", 2549, 2);
            WriteAttributeValue("", 2523, "/Students/Details/", 2523, 18, true);
#line 81 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
WriteAttributeValue("", 2541, item.Id, 2541, 8, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(2550, 98, true);
            WriteLiteral(" class=\"btn btn-info\" role=\"button\">View Semesters</a>\r\n                </td>\r\n            </tr>\r\n");
            EndContext();
#line 84 "C:\Users\ACER\source\repos\WebApp\WebApp\Views\Students\Index.cshtml"
        }

#line default
#line hidden
            BeginContext(2659, 26, true);
            WriteLiteral("    </tbody>\r\n</table>\r\n\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(2702, 12587, true);
                WriteLiteral(@"
    <script type=""text/javascript"">

        var nameregex = /^[A-Z][a-z]+$/;

        function nameValidation(nameVal, idMessSelector, inputIdSellector) {
            var nameMessage = """";
            $(inputIdSellector).css('border', '');
            $(idMessSelector).css('color', '');

            if (nameVal.length === 0) {
                nameMessage = ""Name is required"";
                $(idMessSelector).text(nameMessage);
                $(idMessSelector).attr('class', 'visible-lg');
                $(inputIdSellector).css('border', '2px solid #FF0000');
                $(idMessSelector).css('color', 'red');
                return false;
            }
            else {
                if (nameVal.match(nameregex)) {
                    $(idMessSelector).attr('class', 'hidden');
                    $(idMessSelector).text();
                    return true;
                }
                else {
                    nameMessage = ""Name must starts with uppercase follow with lo");
                WriteLiteral(@"wercase and contains at least 2 letters"";
                    $(idMessSelector).text(nameMessage);
                    $(idMessSelector).attr('class', 'visible-lg');
                    $(inputIdSellector).css('border', '2px solid #FF0000');
                    $(idMessSelector).css('color', 'red');
                    return false;
                }
            }
        }

        function surValidation(surVal, idMessSelector, inputIdSellector) {
            var surMessage = """";
            $(inputIdSellector).css('border', '');
            $(idMessSelector).css('color', '');

            if (surVal.length === 0) {
                surMessage = ""Surname is required"";
                $(idMessSelector).text(surMessage);
                $(idMessSelector).attr('class', 'visible-lg');
                $(inputIdSellector).css('border', '2px solid #FF0000');
                $(idMessSelector).css('color', 'red');
                return false;
            }
            else {
                if");
                WriteLiteral(@" (surVal.match(nameregex)) {
                    $(idMessSelector).attr('class', 'hidden');
                    $(idMessSelector).text();
                    return true;
                }
                else {
                    surMessage = ""Surname must starts with uppercase follow with lowercase and contains at least 2 letters"";
                    $(idMessSelector).text(surMessage);
                    $(idMessSelector).attr('class', 'visible-lg');
                    $(inputIdSellector).css('border', '2px solid #FF0000');
                    $(idMessSelector).css('color', 'red');
                    return false;
                }
            }
        }

        function dobValidation(dobDVal, idMessSelector, inputIdSellector) {
            var dobMessage = """";
            $(inputIdSellector).css('border', '');
            $(idMessSelector).css('color', '');

            if (dobDVal) {
                let isValid = Date.parse(dobDVal)
                if (isValid) {
           ");
                WriteLiteral(@"         $(idMessSelector).attr('class', 'hidden');
                    $(idMessSelector).text();
                    return true;
                }
                else {
                    dobMessage = ""Invalid DOB"";
                    $(idMessSelector).text(dobMessage);
                    $(idMessSelector).attr('class', 'visible-lg');
                    $(inputIdSellector).css('border', '2px solid #FF0000');
                    $(idMessSelector).css('color', 'red');
                    return false;
                }
            } else {
                dobMessage = ""DOB is required"";
                $(idMessSelector).text(dobMessage);
                $(idMessSelector).attr('class', 'visible-lg');
                $(inputIdSellector).css('border', '2px solid #FF0000');
                $(idMessSelector).css('color', 'red');
                return false;
            }
        }

        $('#studentName').on('change', function () {
            var nameVal = $(this).val();
          ");
                WriteLiteral(@"  nameValidation(nameVal, '#nameVMessage', '#studentName');
        })
        $('#studentSurname').on('change', function () {
            var surVal = $(this).val();
            surValidation(surVal, '#surVMessage', '#studentSurname');
        })
        $('#studentDob').on('change', function () {
            var dobVal = $(this).val();
            dobValidation(dobVal, '#dobDVMessage', '#studentDob');
        })

        function showErrorMessages(message, messSelector, inputSellector) {
            $(inputSellector).css('border', '2px solid #FF0000');
            $(messSelector).text(message);
            $(messSelector).attr('class', 'visible-lg');
            $(messSelector).css('color', 'red');
        }


        function saveBtn(result) {
            var childrens = $(result).parent().parent().children();
            var nameinput = $(childrens[1]).children();
            var surnameinput = $(childrens[2]).children();
            var dobinput = $(childrens[3]).children();
     ");
                WriteLiteral(@"       var studentEditName = $(nameinput[0]).val();
            var studentEditSurname = $(surnameinput[0]).val();
            var studentEditDob = $(dobinput[0]).val();

            $(nameinput[0]).on('change', function () {
                var nameVal = $(this).val();
                nameValidation(nameVal, nameinput[1], nameinput[0]);
            })
            $(surnameinput[0]).on('change', function () {
                var surVal = $(this).val();
                surValidation(surVal, surnameinput[1], surnameinput[0]);
            })
            $(dobinput[0]).on('change', function () {
                var dobVal = $(this).val();
                dobValidation(dobVal, dobinput[1], dobinput[0]);
            })

            var editnameValSuc = nameValidation(studentEditName, nameinput[1], nameinput[0]);
            var editSurValSuc = surValidation(studentEditSurname, surnameinput[1], surnameinput[0]);
            var editDobValSuc = dobValidation(studentEditDob, dobinput[1], dobinput[0]");
                WriteLiteral(@");

            if (editnameValSuc && editSurValSuc && editDobValSuc) {
                var id = $(childrens[0]).text();
                $.ajax(
                    {
                        type: ""PUT"", //HTTP PUT Method
                        url: ""Students/Edit"", // Controller/View
                        data: { //Passing data
                            Id: id,
                            Name: studentEditName, //Reading text box values using Jquery
                            Surname: studentEditSurname,
                            Dob: studentEditDob
                        },
                        success: function (response) {
                            if (response.success) {
                                $(childrens[1]).empty()
                                    .append(`${response.result.name}`);
                                $(childrens[2]).empty()
                                    .append(`${response.result.surname}`);
                                $(childrens[3]");
                WriteLiteral(@").empty()
                                    .append(`${response.result.dob.toString()}`);
                                $(childrens[4]).empty()
                                    .append(`<button type=""button"" onclick=""editBtn($(this))"" class=""btn btn-warning mb-2"">Edit</button>
                                                              <a href=""/Students/Details/${id}"" class=""btn btn-info"" role=""button"">View Semesters</a>`); 
                            } else {
                                if (response.result.nameMessage) {
                                    showErrorMessages(response.result.nameMessage, nameinput[1], nameinput[0]);
                                }
                                if (response.result.surnameMessage) {
                                    showErrorMessages(response.result.surnameMessage, surnameinput[1], surnameinput[0]);
                                }
                                if (response.result.dobMessage) {
                               ");
                WriteLiteral(@"     showErrorMessages(response.result.dobMessage, dobinput[1], dobinput[0]);
                                }
                            }
                        }
                    });
            }

        };


        function editBtn(result) {

            var childrens = $(result).parent().parent().children();
            var studId = Number($(childrens[0]).text().trim());
            var studentName = $(childrens[1]).text().trim();
            var studentSurname = $(childrens[2]).text().trim();
            var studentDob = $(childrens[3]).text().trim();

            $(childrens[1]).empty()
                .append(`<input type=""text"" class=""form-control"" value=""${studentName}"" id=""studentNameEdit"" placeholder=""Name"">
                                                <div class=""hidden"" id=""editNameVMessage""></div>`)
            $(childrens[2]).empty()
                .append(`<input type=""text"" class=""form-control"" value=""${studentSurname}"" id=""studentSurnameEdit"" placeholder=""");
                WriteLiteral(@"Name"">
                                                 <div class=""hidden"" id=""editSurVMessage""></div>`)
            $(childrens[3]).empty()
                .append(`<input type=""date"" class=""form-control"" value=""${studentDob}"" id=""studentDobEdit"" placeholder=""Date"">
                                                  <div class=""hidden"" id=""editDobVMessage""></div>`)
            $(childrens[4]).empty()
                .append(`<button  onclick=""saveBtn($(this))"" type=""button"" name=""saveBtn"" class=""btn btn-success mb-2"">Save</button>
                                                   <a href=""/Students/Details/${studId}"" class=""btn btn-info"" role=""button"">View Semesters</a>`)

            var nameinput = $(childrens[1]).children();
            var surnameinput = $(childrens[2]).children();
            var dobinput = $(childrens[3]).children();

            $(nameinput[0]).on('change', function () {
                var nameVal = $(this).val();
                nameValidation(nameVal, nameinput[1], ");
                WriteLiteral(@"nameinput[0]);
            })
            $(surnameinput[0]).on('change', function () {
                var surVal = $(this).val();
                surValidation(surVal, surnameinput[1], surnameinput[0]);
            })
            $(dobinput[0]).on('change', function () {
                var dobVal = $(this).val();
                dobValidation(dobVal, dobinput[1], dobinput[0]);
            })
        };



        //$(document).ready(function () {
        $('#create').click(function (e) {
            studentName = $('#studentName').val();
            studentSurname = $('#studentSurname').val();
            studentDob = $('#studentDob').val();

            var nameValSuc = nameValidation(studentName, '#nameVMessage', '#studentName');
            var surValSuc = surValidation(studentSurname, '#surVMessage', '#studentSurname');
            var dobValSuc = dobValidation(studentDob, '#dobDVMessage', '#studentDob');

            if (nameValSuc && surValSuc && dobValSuc) {
                ");
                WriteLiteral(@"$.ajax(
                    {
                        type: ""POST"", //HTTP POST Method
                        url: ""Students/Create"", // Controller/View
                        data: { //Passing data
                            Name: studentName, //Reading text box values using Jquery
                            Surname: studentSurname,
                            Dob: studentDob
                        },
                        success: function (result) {

                            $('#studentsGrid > tbody:last')
                                .append(`<tr><td>${result.id}</td><td>${result.name}</td><td>${result.surname}</td><td>${result.dob}</td><td>
                                                <button type=""button"" onclick=""editBtn(this)""   name=""editBtn"" class=""btn btn-warning mb-2"">Edit</button>
                                                <a href=""/Students/Details/${result.id}"" class=""btn btn-info"" role=""button"">View Semesters</a></td></tr>`);
                        }
     ");
                WriteLiteral(@"               });

                $('#studentName').val('');
                $('#studentSurname').val('');
                $('#studentDob').val('');
            } else {
                e.preventDefault();
            }
        });
                                //});
    </script>

");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<WebApp.Models.ViewModels.Student>> Html { get; private set; }
    }
}
#pragma warning restore 1591
